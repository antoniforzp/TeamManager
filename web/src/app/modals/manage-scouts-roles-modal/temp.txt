<!-- Role -->
                <div class="row mb-2">
                    <label for="roleInput" class="col-sm-3 col-form-label required">Funkcje w drużynie</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control" matInput [matAutocomplete]="matRoles"
                            formControlName="role"
                            [ngClass]="{'is-invalid': scoutRoles$.value.length <= 0 && (role.touched || role.dirty)}">
                        <mat-autocomplete #matRoles="matAutocomplete">
                            <mat-option *ngFor="let option of availableRoles$ | async" [value]="option.name"
                                (click)="addRole(option)">
                                {{option.name}}
                            </mat-option>
                        </mat-autocomplete>

                        <!-- (!) Role -->
                        <div class="d-flex flex-column"
                            *ngIf="scoutRoles$.value.length === 0  && (role.touched || role.dirty)">
                            <span class="text-danger">
                                Hacerz musi posiadać przynajmniej jedną rolę w drużynie
                            </span>
                        </div>

                        <mat-list>
                            <ng-container *ngFor="let role of scoutRoles$ | async">
                                <mat-list-item>{{role.name}}
                                    <button type="button" class="ml-2 close" aria-label="Close"
                                        (click)="removeRole(role)">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </mat-list-item>
                                <mat-divider></mat-divider>
                            </ng-container>
                        </mat-list>

                    </div>
                </div>


                // ROLES

  addRole(newRole: Role): void {
    this.scoutRoles$.next(this.scoutRoles$.value.concat(newRole));
    this.availableRoles$.next(
      this.allRoles$.value.filter((x) => x.roleId !== newRole.roleId)
    );
    setTimeout(() => this.role.patchValue(''), 1000);
  }

  removeRole(role: Role): void {
    const index = this.scoutRoles$.value.indexOf(role);
    if (index > -1) {
      this.scoutRoles$.next(
        this.scoutRoles$.value.filter((x) => x.roleId !== role.roleId)
      );
    }
  }


  scoutRoles$ = new BehaviorSubject<Role[]>([]);
+ allRoles$
    availableRoles$ = new BehaviorSubject<Role[]>([]);
